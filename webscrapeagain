 
#scrape the first 10 pages of quotes
 
from urllib.request import urlopen, Request
from bs4 import BeautifulSoup
pagenum = 1
author_most = ''
author_least = ''
author_count = {}
tag_count = {}
quotes_count = {}
quote_length = []
most_quotes = 0
least_quotes = 1000000000000
longest_quote_text = ''
shortest_quote_text = ''
for page in range (1,11):
    #iterate through the pages
    original_url = 'https://quotes.toscrape.com'
    url_page = f"{original_url}/page/{str(pagenum)}/"
    headers = {'User-Agent': 'Mozilla/5.0 (Windows NT 6.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/41.0.2228.0 Safari/537.3'}
    req = Request(url_page, headers=headers)
    webpage = urlopen(req).read()
    soup = BeautifulSoup(webpage, 'html.parser')
    block = soup.findAll('div',attrs={'class':'quote'})
    for x in block:

        #author extraction
        author = x.find('small',attrs={'class':'author'}).text
        if author in author_count:
            author_count[author] += 1
        else:
            author_count[author] = 1
        #quote extraction
        quote = x.find('span',attrs={'class':'text'}).text.strip('"')
        quote_length.append(len(quote))
        # Store the longest and shortest quotes
        if longest_quote_text == "" or len(quote) > len(longest_quote_text):
            longest_quote_text = quote
        if shortest_quote_text == "" or len(quote) < len(shortest_quote_text):

            shortest_quote_text = quote


        #tags extraction

        tags = x.find('div',attrs={'class':'tags'}).findAll('a', attrs={'class':'tag'})
        for tag in tags:
            #get the text from tags

            tag_text = tag.text

            if tag_text in tag_count:

                #if word is in tag_count add 1

                tag_count[tag_text] += 1

            else:
                #if word is not in tag_count keep at one
                tag_count[tag_text] = 1

    pagenum += 1


#1 - count the number of quotes by each author

#    find the author with the most and least quotes

print('\n\n\nNumber of Quotes Per Author: ')

for author, count in author_count.items():

    print(f"    {author}: {count}")

print()

print()
for author, count in author_count.items():

    if count > most_quotes:
        author_most = author
        most_quotes = count

    if count < least_quotes:
        author_least = author
        least_quotes = count

print(f"Author with the most quotes: {author_most}, {most_quotes} quotes")
print(f"Author with the least quotes: {author_least}, {least_quotes} quotes")
print()
 
avg_length = sum(quote_length) / len(quote_length)
longest_quote = max(quote_length)
shortest_quote = min(quote_length)

 
print(f"Average Length of Quotes: {avg_length} words")
print()
print(f"Longest Quote: {longest_quote} words \n{longest_quote_text}")
print()
print(f"Shortest Quote: {shortest_quote} words \n{shortest_quote_text}")

 

#3 - if there are tags associated with each quote do the following

#    what is the most popular tag

#    how many total tags were used across all quotes

popular_tag = max(tag_count, key=tag_count.get)

total_tags = sum(tag_count.values())

 

print(f"Most Popular Tag: {popular_tag}")

print(f"Total Tags: {total_tags}\n\n")




#4 - Create a visualization using plotly to represent the top 10

#    authors and their corresponding number of quotes with the highest number first

#    Create a visualization using plotly to represent the top 10 tags based on popularity

 

import plotly.graph_objs as go



#sort authors and tags

sorted_authors = sorted(author_count.items(), key=lambda x: x[1], reverse=True)

sorted_tags = sorted(tag_count.items(), key=lambda x: x[1], reverse=True)

#personal notes :

#          author_count.items() converts the dict to a list of tuples containing a key value pair

#          key=lambda x: x[1] sorting based on the second element aka the count

#          reverse=True tells it to count in reverse order aka the highest should be first

 

#get top 10 authors & tags (the [:10] takes the top 10)

top_authors = dict(sorted_authors[:10])

top_tags = dict(sorted_tags[:10])

 

author_names = list(top_authors.keys())

author_occurrences = list(top_authors.values())

tag_names = list(top_tags.keys())

tag_occurrences = list(top_tags.values())

#personal notes :  

#          author_names takes the keys (names) from the top_authors

#          author_quotes takes the values (count)

#          tag_names takes the keys (names)

#          tag occurrences takes the values (count)

 

#create graph

fig = go.Figure()

#initializes a new figure object

 

fig.add_trace(go.Bar(x=author_names, y=author_occurrences, name='AUTHORS'))     #makes a bar for the authors (names = x axis, occurrences = y axis)

fig.add_trace(go.Bar(x=tag_names, y=tag_occurrences, name='TAGS'))

 

fig.update_layout(barmode='group', title='Top 10 Authors & Tags')     #groups the occurences together

fig.show()  #displays the graph

 

 